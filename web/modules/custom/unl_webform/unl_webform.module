<?php

/**
 * @file
 * Modifies Webform UI to pare down options and enforce defaults.
 */

use Drupal\Component\Utility\Bytes;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\WebformInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_entity_create().
 */
function unl_webform_entity_create(EntityInterface $entity) {
  if ($entity instanceof WebformInterface) {
    // Alter settings for newly created Webforms.
    $settings = $entity->getSettings();
    // Disable "Allow users to post submissions from a dedicated URL".
    $settings['page'] = FALSE;
    // Set "Confirmation Type" to "inline".
    $settings['confirmation_type'] = 'inline';
    // Set "Form access denied settings" to prompt a login on Webform Nodes.
    $settings['form_access_denied'] = 'login';
    $settings['form_access_denied_message'] = '<a href="/cas?destination=[current-page:url:path]">Please login</a> to view the form.';

    $settings = $entity->setSettings($settings);
  }
}

/**
 * Implements hook_form_alter().
 */
function unl_webform_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  switch ($form_id) {
    case 'webform_settings_access_form':
      // Disable changes to much of the 'Access' subtab.
      $form['access']['update_any']['#disabled'] = TRUE;
      $form['access']['delete_any']['#disabled'] = TRUE;
      $form['access']['purge_any']['#disabled'] = TRUE;
      $form['access']['view_own']['#disabled'] = TRUE;
      $form['access']['update_own']['#disabled'] = TRUE;
      $form['access']['delete_own']['#disabled'] = TRUE;
      $form['access']['administer']['#disabled'] = TRUE;
      $form['access']['test']['#disabled'] = TRUE;
      $form['access']['configuration']['#disabled'] = TRUE;
      break;
    case 'webform_settings_form':
      // Disable "Allow users to post submissions from a dedicated URL" field.
      $form['page_settings']['page']['#disabled'] = TRUE;
      break;
    case 'webform_settings_confirmation_form':
      $uid = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
      if (!$uid->hasRole('administrator') && !$uid->hasRole('coder')) {
        $form['confirmation_type']['confirmation_type']['#disabled'] = TRUE;
      }
      break;
  }

  $fieldset_elements = [
      'checkboxes',
      'details',
      'fieldset',
      'radios',
      'telephone_advanced',
      'webform_address',
      'webform_buttons',
      'webform_buttons_other',
      'webform_checkboxes_other',
      'webform_name',
      'webform_radios_other',
      'webform_select_other',
      'webform_telephone',
    ];
    // Add required text on fieldset webform elements
    if($form['#entity_type'] == 'webform_submission' || $form['#theme'][0] == 'webform_submission_form') {
      foreach($form['elements'] as $key => $element) {
        if(in_array($element['#type'], $fieldset_elements)) {
          if($element['#required'] ==  true) {
            $form['elements'][$key]['#title'] = $element['#title'] . ' <small class="dcf-required dcf-regular">Required</small>';
        }
       }
      }
    }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the Webform UI element type select form.
 */
function unl_webform_form_webform_ui_element_type_select_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Loop through $form array.
  foreach ($form as $key => $value) {
    // Groups are identifiable by keys that are integers.
    if (is_int($key)) {
      // Find the 'Other elements' group.
      $title = $form[$key]['#title']->render();
      if ($title == 'Other elements') {
        // Remove the 'webform_element' option (aka 'Generic Element').
        // This isn't possible via the UI due to
        // https://www.drupal.org/project/webform/issues/3003641.
        unset($form[$key]['elements']['webform_element']);

        // Loop through the elements array to determine if there
        // are any other elements. If not, then remove the group.
        $remove_group = TRUE;
        foreach ($form[$key]['elements'] as $element_key => $element) {
          // Element key strings do not begin with '#'.
          if (substr($element_key, 0, 1) !== "#") {
            $remove_group = FALSE;
          }
        }
        if ($remove_group) {
          unset($form[$key]);
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alters the Webform UI element form.
 */
function unl_webform_form_webform_ui_element_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Get info about the Webform element.
  $build_info = $form_state->getBuildInfo();
  $element = $build_info['callback_object']->getElement();
  $element_type = $element['#type'];
  // Add element type to $form array to make it available to
  // validate function(s).
  $form['element_type'] = $element_type;

  // Get Webform settings.
  $config = \Drupal::service('config.factory')->get('webform.settings');

  /* Global modifications. */

  // Remove most of the advanced configuration.
  unset($form['properties']['wrapper_attributes']);
  unset($form['properties']['element_attributes']);
  unset($form['properties']['label_attributes']);
  unset($form['properties']['admin']);
  unset($form['properties']['custom']);
  unset($form['properties']['display']['format_attributes']);

  // Save the value of the 'after' option and then remove the option to display title after an element or to hide title.
  $afterValue = $form['properties']['form']['display_container']['title_display']['#options']['after'];
  unset($form['properties']['form']['display_container']['title_display']['#options']['after']);
  unset($form['properties']['form']['display_container']['title_display']['#options']['invisible']);
  // Default value may be set to 'invisible'.
  if ($form['properties']['form']['display_container']['title_display']['#default_value'] == 'invisible') {
    $form['properties']['form']['display_container']['title_display']['#default_value'] = NULL;
  }

  // Remove Help and More description options.
  unset($form['properties']['element_description']['help']);
  unset($form['properties']['element_description']['more']);
  // Override description to remove references to 'help' and 'more'.
  $form['properties']['element_description']['#title'] = t('Element description');

  // Remove invisible and tooltip description display options.
  unset($form['properties']['form']['display_container']['description_display']['#options']['invisible']);
  unset($form['properties']['form']['display_container']['description_display']['#options']['tooltip']);

  // Defintion list of elements rendered as a fieldset.
  $fieldset_elements = [
    'checkboxes',
    'details',
    'fieldset',
    'radios',
    'telephone_advanced',
    'webform_address',
    'webform_buttons',
    'webform_buttons_other',
    'webform_checkboxes_other',
    'webform_name',
    'webform_radios_other',
    'webform_select_other',
    'webform_telephone',
  ];

  // For elements rendered as fieldsets, force description to 'before'.
  if (in_array($element_type, $fieldset_elements)) {
    if (isset($form['properties']['form']['display_container']['description_display'])) {
      // Remove option to display title after element or to hide title.
      unset($form['properties']['form']['display_container']['description_display']['#empty_option']);
      unset($form['properties']['form']['display_container']['description_display']['#options']['after']);
      $form['properties']['form']['display_container']['description_display']['#default_value'] = 'before';
    }
  }

  // For the checkbox element, only allow the "after" title display option.
  if ($element_type == 'checkbox') {
    $form['properties']['form']['display_container']['title_display']['#options']['after'] = $afterValue;
    $form['properties']['form']['display_container']['title_display']['#default_value'] = 'after';
    unset($form['properties']['form']['display_container']['title_display']['#options']['before']);
    unset($form['properties']['form']['display_container']['title_display']['#options']['inline']);
    unset($form['properties']['form']['display_container']['title_display']['#options']['none']);
    unset($form['properties']['form']['display_container']['title_display']['#empty_option']);
  }

  // Only allow field prefix and field suffix on textfield and number elements.
  $elements_allowed_prefix_suffix = [
    'textfield',
    'number',
  ];
  if (!in_array($element_type, $elements_allowed_prefix_suffix)) {
    unset($form['properties']['form']['field_container']);
  }

  // Remove placeholder option.
  unset($form['properties']['form']['placeholder']);

  // Remove field prefix and field suffix option from options elements
  // with 'other' option. Used by all '[type] other' elements, such as
  // 'Radios other' and 'Select other'.
  unset($form['properties']['options_other']['other__field_container']);

  // Remove Options display options (e.g. one-column, two-column).
  unset($form['properties']['options']['options_display_container']['options_display']);
  // Remove option to display option descriptions as 'help'
  // Leaves only option as 'description'.
  unset($form['properties']['options']['options_display_container']['options_description_display']['#options']['help']);

  /* Field-specific modifications. */

  // Address field.
  if ($element_type == 'webform_address') {
    // Remove help field.
    unset($form['properties']['composite']['element']['address']['labels']['data']['address__help']);
    unset($form['properties']['composite']['element']['address_2']['labels']['data']['address_2__help']);
    unset($form['properties']['composite']['element']['city']['labels']['data']['city__help']);
    unset($form['properties']['composite']['element']['state_province']['labels']['data']['state_province__help']);
    unset($form['properties']['composite']['element']['postal_code']['labels']['data']['postal_code__help']);
    unset($form['properties']['composite']['element']['country']['labels']['data']['country__help']);

    // Remove option to display title after element.
    unset($form['properties']['composite']['element']['address']['labels']['data']['address__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['address_2']['labels']['data']['address_2__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['city']['labels']['data']['city__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['state_province']['labels']['data']['state_province__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['postal_code']['labels']['data']['postal_code__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['country']['labels']['data']['country__title_display']['#options']['after']);
  }

  // Name field.
  if ($element_type == 'webform_name') {
    // Remove help field.
    unset($form['properties']['composite']['element']['title']['labels']['data']['title__help']);
    unset($form['properties']['composite']['element']['first']['labels']['data']['first__help']);
    unset($form['properties']['composite']['element']['middle']['labels']['data']['middle__help']);
    unset($form['properties']['composite']['element']['last']['labels']['data']['last__help']);
    unset($form['properties']['composite']['element']['suffix']['labels']['data']['suffix__help']);
    unset($form['properties']['composite']['element']['degree']['labels']['data']['degree__help']);

    // Remove option to display title after element.
    unset($form['properties']['composite']['element']['title']['labels']['data']['title__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['first']['labels']['data']['first__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['middle']['labels']['data']['middle__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['last']['labels']['data']['last__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['suffix']['labels']['data']['suffix__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['degree']['labels']['data']['degree__title_display']['#options']['after']);
  }

  // Telephone Advanced field.
  if ($element_type == 'webform_telephone') {
    // Remove help field.
    unset($form['properties']['composite']['element']['type']['labels']['data']['type__help']);
    unset($form['properties']['composite']['element']['phone']['labels']['data']['phone__help']);
    unset($form['properties']['composite']['element']['ext']['labels']['data']['ext__help']);

    // Remove option to display title after element.
    unset($form['properties']['composite']['element']['type']['labels']['data']['type__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['phone']['labels']['data']['phone__title_display']['#options']['after']);
    unset($form['properties']['composite']['element']['ext']['labels']['data']['ext__title_display']['#options']['after']);
  }

  // Upload fields.
  if (
    $element_type == 'managed_file'
    || $element_type == 'webform_document_file'
    || $element_type == 'webform_image_file'
  ) {
    // Remove some description placement options.
    unset($form['properties']['file']['file_help']['#options']['help']);
    unset($form['properties']['file']['file_help']['#options']['more']);
    unset($form['properties']['file']['file_help']['#options']['none']);

    // Remove preview.
    unset($form['properties']['file']['file_preview']);

    // Remove file rename option.
    unset($form['properties']['file']['file_name']);

    // Set allowed extensions.
    switch ($element_type) {
      case ('managed_file'):
        $form['properties']['file']['file_extensions']['#description'] = t('Separate extensions with a space and do not include the leading dot.<br/><br/>Defaults to and <strong>is limited to</strong>: <em class="placeholder">gif jpg png bmp eps tif pict psd txt rtf html odf pdf doc docx ppt pptx xls xlsx xml avi mov mp3 ogg wav bz2 dmg gz jar rar sit svg tar zip</em>');
        break;

      case ('webform_document_file'):
        $form['properties']['file']['file_extensions']['#description'] = t('Separate extensions with a space and do not include the leading dot.<br/><br/>Defaults to and <strong>is limited to</strong>: <em class="placeholder">txt rtf pdf doc docx odt ppt pptx odp xls xlsx ods</em>');
        break;

      case ('webform_image_file'):
        $form['properties']['file']['file_extensions']['#description'] = t('Separate extensions with a space and do not include the leading dot.<br/><br/>Defaults to and <strong>is limited to</strong>: <em class="placeholder">gif jpg png</em>');
        break;
    }

    // Set Santize option to always on.
    $form['properties']['file']['sanitize']['#default_value'] = TRUE;
    $form['properties']['file']['sanitize']['#disabled'] = TRUE;

    // Set 'Maximum file size'.
    $max_filesize = Bytes::toNumber($config->get('file.default_max_filesize')) / 1024 / 1024;
    $form['properties']['file']['max_filesize']['#default_value'] = $max_filesize;
    $form['properties']['file']['max_filesize']['#disabled'] = TRUE;

    // Remove upload button option.
    unset($form['properties']['file']['button']);
    unset($form['properties']['file']['button__title']);
    unset($form['properties']['file']['button__attributes']);
  }

  if ($element_type == 'date') {
    // Remove option to use jQuery UI datepicker.
    unset($form['properties']['date']['datepicker']);
    unset($form['properties']['date']['datepicker_button']);
  }

  // Add custom validation.
  array_unshift($form['#validate'], 'unl_webform_webform_ui_element_form_validate');
}

/**
 * Validation function for unl_webform_form_webform_ui_element_form_alter().
 */
function unl_webform_webform_ui_element_form_validate($form, FormStateInterface &$form_state) {
  $element_type = $form['element_type'];

  // Get Webform settings.
  $config = \Drupal::service('config.factory')->get('webform.settings');

  if (
    $element_type == 'managed_file'
    || $element_type == 'webform_document_file'
    || $element_type == 'webform_image_file'
  ) {

    // Validate file extensions.
    $extensions = explode(' ', $form_state->getValue(['properties', 'file_extensions']));
    $sanitized_extensions = unl_webform_upload_file_extension_whitelist($element_type, $extensions);
    $removed_extensions = array_diff($extensions, $sanitized_extensions);

    if ($removed_extensions) {
      $message = 'The following file extensions are not allowed: ';
      foreach ($removed_extensions as $extension) {
        $message .= $extension . ' ';
      }
      $message = rtrim($message);
      $form_state->setErrorByName('properties][file_extensions', $message);
    }
  }
}

/**
 * Checks an array of file upload extensions against a whitelist.
 *
 * @param string $element_type
 *   The webform element type.
 * @param array $extensions
 *   An array of extensions being checked against the whitelist.
 *
 * @return array
 *   A sanitized copy of the parameter $extensions array.
 */
function unl_webform_upload_file_extension_whitelist(string $element_type, array $extensions) {
  // Get Webform settings.
  $config = \Drupal::service('config.factory')->get('webform.settings');

  $return = NULL;
  switch ($element_type) {
    case ('managed_file'):
      $allowed_extensions = explode(' ', $config->get('file.default_managed_file_extensions'));
      $return = array_intersect($allowed_extensions, $extensions);
      break;

    case ('webform_document_file'):
      $allowed_extensions = explode(' ', $config->get('file.default_document_file_extensions'));
      $return = array_intersect($allowed_extensions, $extensions);
      break;

    case ('webform_image_file'):
      $allowed_extensions = explode(' ', $config->get('file.default_image_file_extensions'));
      $return = array_intersect($allowed_extensions, $extensions);
      break;
  }

  return $return;
}

/**
 * Implements hook_entity_access().
 *
 * Controls access to webform entities.
 */
function unl_webform_entity_access(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Session\AccountInterface $account) {
  $restricted_webform_options = array(
    "days",
    "months",
    "time_zones",
    "titles",
    "yes_no",
    "country_codes",
    "country_names",
    "state_province_codes",
    "state_province_names",
    "state_codes",
    "state_names",
    "languages",
    "likert_agreement",
    "likert_comparison",
    "likert_importance",
    "likert_quality",
    "likert_satisfaction",
    "likert_ten_scale",
    "likert_would_you"
  );
  // Allow addition and deletion operations for access unl webform options, restricted to user-created predefined webform options lists.
  if ($entity->getEntityTypeId() === 'webform_options' && !in_array($entity->id(), $restricted_webform_options)) {
    return AccessResult::allowedIfHasPermission($account, 'access unl webform options');
  }



  // Check if the entity is a webform submission.
  if ($entity->getEntityTypeId() == 'webform_submission') {
    $owner_id = $entity->getOwnerId();
    $account_id = $account->id();

    if (($operation == 'view' && !$account->hasPermission('view any webform submission')) ||
      ($owner_id != $account_id && !$account->hasPermission('view own webform submission'))
    ) {
      return AccessResult::forbidden();
    }

    if (($operation == 'delete')) {
      if ((!$account->hasPermission('delete any webform submission')) ||
        ($owner_id != $account_id && !$account->hasPermission('delete own webform submission'))
      ) {
        return AccessResult::forbidden();
      }
    }

    if ($operation == 'update') {
      if ((!$account->hasPermission('edit any webform submission')) ||
        ($owner_id != $account_id && !$account->hasPermission('edit own webform submission'))
      ) {
        return AccessResult::forbidden();
      }
    }

    if ($operation == 'duplicate') {
      if ((!$account->hasPermission('edit any webform submission')) ||
        ($owner_id != $account_id && !$account->hasPermission('edit own webform submission'))
      ) {
        return AccessResult::forbidden();
      }
    }
  }
  
  // Grant access (delegate access decisions to the webform module or other modules) if none of the conditions restrict it.
  return AccessResult::neutral();
}

/**
 * Implements hook_entity_create_access().
 */
function unl_webform_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  // Only check for 'webform_options' entity type.
  if ($context['entity_type_id'] === 'webform_options') {
    // Allow entity creation if the user has the custom 'access webform options'.
    return AccessResult::allowedIfHasPermission($account, 'access unl webform options');
  }
  // For other entities, return neutral.
  return AccessResult::neutral();
}
