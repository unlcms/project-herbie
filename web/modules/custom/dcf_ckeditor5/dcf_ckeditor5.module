<?php

/**
 * @file
 * This module provides code for validations and other modifications to content in CKEditor.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_alter().
 */

function dcf_ckeditor5_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Only proceed when a node is being created or updated.
  if ((strpos($form_id, 'node_') === 0 && substr($form_id, -5) === '_form') || strpos($form_id, 'node_') === 0 && substr($form_id, -5) === 'edit_form') {
    $form_object = $form_state->getFormObject();
    if ($form_object instanceof \Drupal\node\NodeForm) {
      $node = $form_object->getEntity();
      $fields = $node->getFieldDefinitions();
      foreach ($fields as $field_definition) {
        if ($field_definition->getType() === 'text' || $field_definition->getType() === 'text_with_summary' || $field_definition->getType() === 'text_long') {
          // Check if the field has text area formatting enabled.
          $field_third_party_settings = $field_definition->getThirdPartySettings('allowed_formats');
          if (is_array($field_third_party_settings) && !empty($field_third_party_settings['allowed_formats'])) {
            $field_name = $field_definition->getName();
            $field_names[] = $field_name;
            $form_state->set('text_area_formats_to_validate', $field_names);
            $form['#validate'][] = '__dcf_ckeditor5_validate_links_in_text_fields';
          }
        }
      }
    }
  }
}

/**
 * Link validation for a text area fields with an enabled text format.
 */
function __dcf_ckeditor5_validate_links_in_text_fields(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof \Drupal\node\NodeForm) {
    // Retrieve fields labeled for evaluation.
    foreach ($form_state->get('text_area_formats_to_validate') as $field_name_to_validate) {
      $field_to_validate = $form_state->getValue($field_name_to_validate);
      if (!empty($field_to_validate)) {
        // Get the field value.
        $content = $field_to_validate[0]['value'];

        if (!empty($content)) {
          // Load the content into DOMDocument.
          $dom = new \DOMDocument();
          $dom->loadHTML($content, LIBXML_HTML_NOIMPLIED | LIBXML_HTML_NODEFDTD);
          // Find all <a> tags.
          $anchor_tags = $dom->getElementsByTagName('a');
          $invalid_urls = [];
          $invalid_anchor_ids = [];

          foreach ($anchor_tags as $anchor_tag) {
            // Extract href attributes.
            $href = $anchor_tag->getAttribute('href');
            // Validate URL (applies to both internal and external links).
            if (!filter_var($href, FILTER_VALIDATE_URL)) {
              $base_url = \Drupal::request()->getSchemeAndHttpHost();
              $base_path = \Drupal::request()->getBasePath();
              $full_url_base_path = $base_url . $base_path . $href;

              // Currently, only node and media items can be linked internally. Verify if the URL is not internal.
              if ((substr($href, 0, 6) !== "/node/") && (substr($href, 0, 7) !== "/media/")) {
                if (!empty($href)) {
                  $path_validator = \Drupal::service('path.validator');
                  $url_without_anchor = strtok($href, '#');
                  // Check if the user-provided path (alias), with any anchor removed, resolves to a valid internal URL.
                  if ($path_validator->isValid($url_without_anchor)) {
                    $full_url = $base_url . $href;
                    if (!filter_var($full_url, FILTER_VALIDATE_URL)) {
                      $invalid_urls[] = '[' . $href . ']';
                    }
                  }
                  elseif (!empty($base_path)) {
                    if (!filter_var($full_url_base_path, FILTER_VALIDATE_URL)) {
                      $invalid_urls[] = '[' . $href . ']';
                    }
                  }
                  // Determine if the URL is only an anchor reference (starts with '#')
                  elseif (str_starts_with($href, '#')) {
                    $node = \Drupal::routeMatch()->getParameter('node');
                    if ($node instanceof \Drupal\node\NodeInterface) {
                      $alias = \Drupal::service('path_alias.manager')->getAliasByPath('/node/' . $node->id());
                      $full_url = $base_url . $alias . $href;
                      if (!filter_var($full_url, FILTER_VALIDATE_URL)) {
                        if (empty($base_path)) {
                          $invalid_urls[] = '[' . $href . ']';
                        }
                        elseif (!filter_var($base_url . $base_path . $alias . $href, FILTER_VALIDATE_URL)) {
                          $invalid_urls[] = '[' . $href . ']';
                        }
                      }
                    }
                  }
                  else {
                    $invalid_urls[] = '[' . $href . ']';
                  }
                }
                else {
                  // If href is empty or missing (common for ckeditor anchor link additions), validate the anchor link ID.
                  $anchor_class = $anchor_tag->getAttribute('class');
                  if ($anchor_class !== 'ck-anchor') {
                    // If the link is not a ckeditor anchor link and has no href value, mark it as an invalid URL for accessibility.
                    $invalid_urls[] = '[' . $href . ']';
                  }
                  elseif ($anchor_class === 'ck-anchor') {
                    $anchor_id = $anchor_tag->getAttribute('id');
                    // Validate ID
                    if (empty($anchor_id) || preg_match('/\s/', $anchor_id)) {
                      $invalid_anchor_ids[] = '[' . $anchor_id . ']';
                    }
                  }
                }
              }
              // If the URL is an internal link.
              elseif (substr($href, 0, 6) === "/node/" || (substr($href, 0, 7) === "/media/")) {
                // Combine the base URL with the internal path.
                $full_url = $base_url . $href;
                // Validate internal url.
                if (!filter_var($full_url, FILTER_VALIDATE_URL)) {
                  if (empty($base_path) || (!empty($base_path) && !filter_var($full_url_base_path, FILTER_VALIDATE_URL))) {
                    $invalid_urls[] = '[' . $href . ']';
                  }
                }
              }
            }
          }
        }

        // Store all error messages received from a specific field.
        $error_message = [];
        // If there are invalid URLs, display an error on the page and prevent saving.
        if (!empty($invalid_urls)) {
          $invalid_urls_string = implode(', ', array_map('htmlspecialchars', $invalid_urls));
          $error_message[] = t('Invalid URLs â€“ The link(s) may not exist, or they may contain spaces or invalid characters. For internal pages, search for the content by its page name before linking. The following links have issues: @urls', [
            '@urls' => $invalid_urls_string,
          ]) . ' ';
        }

        // If there are invalid anchor tag ids, display an error on the page and prevent saving.
        if (!empty($invalid_anchor_ids)) {
          $invalid_anchor_ids_string = implode(', ', array_map('htmlspecialchars', $invalid_anchor_ids));
          $error_message[] = t('Invalid anchor IDs - Remove spaces and invalid characters: @ids', [
            '@ids' => $invalid_anchor_ids_string,
          ]);
        }

        // Set the combined error message, if any errors exist.
        if (!empty($error_message)) {
          $error_message = implode('. ', $error_message);
          $form_state->setErrorByName($field_name_to_validate, $error_message);
        }
      }
    }
  }
}
