<?php

/**
 * @file
 * This is the module provides media functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\unl_utility\UNLUtilityTrait;

/**
 * Implements hook_form_alter().
 */
function unl_media_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Adds a media_metadata form element to media edit forms that renders a view
  // with meta data about the media entity.
  //
  // Alter media edit forms: media_BUNDLE_edit_form.
  // Media edit forms have unique form id's.
  $media_edit_form_ids = [
    'media_file_edit_form',
    'media_image_edit_form',
    'media_remote_video_edit_form',
  ];
  if (in_array($form_id, $media_edit_form_ids)) {
    // Get entity ID to pass to view.
    $entity = \Drupal::service('unl_utility.manager')->getRouteEntity();
    $entity_id = $entity->id();

    $form['media_metadata'] = [
      '#type' => 'details',
      '#title' => t('Media Metadata'),
      '#group' => 'advanced',
      '#weight' => 99,
      '#attributes' => [
        'class' => ['media-metadata'],
      ],
    ];
    $form['#attached']['library'][] = 'unl_media/media_metadata';

    switch ($form_id) {
      case ('media_file_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'file', $entity_id)),
        ];
        break;

      case ('media_image_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'image', $entity_id)),
        ];
        break;

      case ('media_remote_video_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'remote_video', $entity_id)),
        ];
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function unl_media_form_editor_media_dialog_alter(&$form, FormStateInterface &$form_state, $form_id) {
  $storage = $form_state->getStorage();
  $media_uuid = $storage['media_embed_element']['data-entity-uuid'];
  $media_loaded_by_uuid = \Drupal::entityTypeManager()->getStorage('media')->loadByProperties(['uuid' => $media_uuid]);
  $media_loaded_by_uuid = reset($media_loaded_by_uuid);
  $bundle = $media_loaded_by_uuid->bundle();
  // Add bundle to $form_state storage.
  $storage['bundle'] = $bundle;
  $form_state->setStorage($storage);

  if ($bundle == 'image') {
    // Limit options to certain view modes.
    // Can be removed when Media Library Extras has committed
    // https://www.drupal.org/project/media_library_extras/issues/3108619
    $form['view_mode']['#options'] = [
      'narrow' => 'Narrow',
      'wide' => 'Wide'
    ];
    // Hide align field for 'Wide' view mode, which is 100% wide.
   $form['align']['#states'] = [
      'invisible' => [
        ':input[name="attributes[data-view-mode]"]' => ['value' => 'wide'],
      ],
    ];
  }
  if ($bundle == 'remote_video') {
    // Limit options to certain view modes.
    // Can be removed when Media Library Extras has committed
    // https://www.drupal.org/project/media_library_extras/issues/3108619
    $form['view_mode']['#options'] = [
      'remote_video' => 'Remote Video',
    ];
    // Videos are always 100% wide.
    unset($form['align']);
  }

  $form['#validate'][] = '_unl_media_media_embed_dialog_validate';
}

/**
 * Validation function for the 'editor_media_dialog' form.
 *
 * @param array $form
 *   Nested array of form elements that comprise the form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _unl_media_media_embed_dialog_validate($form, FormStateInterface &$form_state) {
  $storage = $form_state->getStorage();
  $bundle = $storage['bundle'];
  $values = $form_state->getValues();

  if ($bundle == 'image') {
    // If view mode is set to 'wide', then set data-align to "none".
    if ($values['attributes']['data-view-mode'] == 'wide') {
      $form_state->setValue(['attributes', 'data-align'], 'none');
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function unl_media_form_editor_link_dialog_alter(&$form, FormStateInterface &$form_state, $form_id) {
  global $base_url;

  // Replace default help text.
  $form['attributes']['href']['#description'] = t('<strong>Existing content:</strong> Start typing to select an autocomplete option<br><span class="indent">For content on @base_url</span><br><strong>External URLs:</strong> Type full URL<br><span class="indent">For content on sites other than @base_url</span><br><strong>Files (media):</strong> Click on the <em>Media Library</em> button below:', ['@base_url' => $base_url]);
  $form['#attached']['library'][] = 'unl_media/editor_dialog_modal';
}

/**
 * Implements template_preprocess_responsive_image_formatter().
 */
function unl_media_preprocess_responsive_image_formatter(&$variables) {
  // Add custom attribute to responsive images with responsive image style key.
  $variables['responsive_image']['#attributes']['data-responsive-image-style'] = $variables['responsive_image_style_id'];
}

/**
 * Implements template_preprocess_media().
 */
function unl_media_preprocess_media(&$variables) {
  $view_mode = $variables['view_mode'];
  $variables['attributes']['class'][] = 'media-entity';
  $variables['attributes']['class'][] = 'view-mode--' . $view_mode;
}

/**
 * Implements template_preprocess_filter_caption().
 */
function unl_media_preprocess_filter_caption(&$variables) {
  // For <drupal-media> elements rendered with captions, get the view
  // mode and add a corresponding class to the <figure> element.
  //
  // Convert the markup to a DOM element.
  $element_string = $variables['node']->__toString();
  $dom = new DOMDocument();
  @$dom->loadHTML($element_string);
  // Only proceed if element is <drupal-media>.
  $element = $dom->getElementsByTagName("drupal-media");
  if (method_exists($element,'count') && $element->count() != 0) {
    $element = $element->item(0);
    $data_view_mode = $element->getAttribute('data-view-mode');

    // Set classes on caption element.
    $variables['classes'] = trim($variables['classes'] . ' figure--embedded-media view-mode--' . $data_view_mode);
  }
}
