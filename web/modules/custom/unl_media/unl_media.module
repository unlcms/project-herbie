<?php

/**
 * @file
 * This is the module provides media functionality.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_entity_presave().
 */
function unl_media_entity_presave(\Drupal\Core\Entity\EntityInterface $entity) {

  if ($entity->getEntityTypeId() === 'node' && $entity->bundle() == 'builder_page') {
    // Check if node is being updated/edited
    if (!$entity->isNew()) {

      // Get original state of the node entity prior to the update
      $original_entity = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadUnchanged($entity->id());

      $updated_hero_block = $entity->get('s_n_hero');
      $original_hero_block = $original_entity->get('s_n_hero');

      if ($updated_hero_block && $original_hero_block) {
        if ($updated_hero_block->referencedEntities()) {
          $updated_hero_block_values = $updated_hero_block->referencedEntities()[0];
        }
        if ($original_hero_block->referencedEntities()) {
          $original_hero_block_values = $original_hero_block->referencedEntities()[0];
        }

        if (isset($updated_hero_block_values)) {
          if ($updated_object_position_field_value = $updated_hero_block_values->get('b_hero_img_obj_pos')->getValue()) {
            $updated_object_position_field_value = $updated_hero_block_values->get('b_hero_img_obj_pos')->getValue()[0]['value'];
          }
          $hero_block_hero_iamge = $updated_hero_block_values->get('b_hero_image');
        }

        if (isset($original_hero_block_values)) {
          if ($original_object_position_field_value = $original_hero_block_values->get('b_hero_img_obj_pos')->getValue()) {
            $original_object_position_field_value = $original_hero_block_values->get('b_hero_img_obj_pos')->getValue()[0]['value'];
          }
        }

        // Check if object position field value has changed
        if (isset($updated_object_position_field_value) && isset($original_object_position_field_value) && ($updated_object_position_field_value !== $original_object_position_field_value)) {
          if ($hero_block_hero_iamge) {
            $hero_image_field = $updated_hero_block_values->get('b_hero_image');
            $hero_media_entity = $hero_image_field->referencedEntities()[0];
            $cacheTags = $hero_media_entity->getCacheTagsToInvalidate()[0];
            // Clear the cache entry of the media item associated only with the hero block.
            \Drupal::service('cache_tags.invalidator')->invalidateTags([$cacheTags]);
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function unl_media_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Alter media edit forms: media_BUNDLE_edit_form.
  // Media edit forms have unique form id's.
  $media_edit_form_ids = [
    'media_file_edit_form',
    'media_image_edit_form',
    'media_remote_video_edit_form',
  ];

  if (in_array($form_id, $media_edit_form_ids)) {
    // Adds a media_metadata form element to media edit forms that renders a view
    // with meta data about the media entity.

    // Get entity ID to pass to view.
    $entity = \Drupal::service('unl_utility.manager')->getRouteEntity();
    $entity_id = $entity->id();

    $form['media_metadata'] = [
      '#type' => 'details',
      '#title' => t('Media Metadata'),
      '#group' => 'advanced',
      '#weight' => 99,
      '#attributes' => [
        'class' => ['media-metadata'],
      ],
    ];
    $form['#attached']['library'][] = 'unl_media/media_metadata';

    switch ($form_id) {
      case ('media_file_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'file', $entity_id)),
        ];
        break;

      case ('media_image_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'image', $entity_id)),
        ];
        break;

      case ('media_remote_video_edit_form'):
        $form['media_metadata']['view'] = [
          '#markup' => \Drupal::service('renderer')->render(views_embed_view('media_metadata', 'remote_video', $entity_id)),
        ];
        break;
    }

    // Hide the revision info. With the use of media_entity_file_replace and
    // media_file_delete we don't want revisions of Media.
    $form['revision']['#type'] = 'hidden';
    $form['revision_information']['#type'] = 'hidden';
    $form['revision_log_message']['#type'] = 'hidden';
  }
}

/**
 * Implements template_preprocess_responsive_image_formatter().
 */
function unl_media_preprocess_responsive_image_formatter(&$variables) {
  // Add custom attribute to responsive images with responsive image style key.
  $variables['responsive_image']['#attributes']['data-responsive-image-style'] = $variables['responsive_image_style_id'];
}

/**
 * Implements template_preprocess_media().
 */
function unl_media_preprocess_media(&$variables) {
  $view_mode = $variables['view_mode'];
  $variables['attributes']['class'][] = 'media-entity';
  $variables['attributes']['class'][] = 'view-mode--' . $view_mode;
}

/**
 * Implements hook_preprocess_HOOK() for setting classes.
 */
function unl_media_preprocess_filter_caption(&$variables) {
  // For <drupal-media> elements rendered with captions, get the view
  // mode and add a corresponding class to the <figure> element.
  //
  // Limitation: if the default view mode is selected by the user,
  //   it is not added to the <drupal-media> tag and not discoverable here,
  //   thus the class added will be 'view-mode--'.
  //
  // Convert the markup to a DOM element.
  //would need to allow the data type and other attributes
  // in ckeditor5 tags to be able to get view mode
  $element_string = $variables['node']->__toString();
  $dom = new DOMDocument();
  @$dom->loadHTML($element_string);
  // Only proceed if element is <drupal-media>.
  $element = $dom->getElementsByTagName("drupal-media");
  if (method_exists($element, 'count') && $element->count() != 0) {
    $element = $element->item(0);
    $data_view_mode = $element->getAttribute('data-view-mode');

    // Set classes on caption element.
    $variables['classes'] = trim($variables['classes'] . ' figure--embedded-media view-mode--' . $data_view_mode);
  }
}
