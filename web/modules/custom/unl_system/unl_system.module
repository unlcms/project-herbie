<?php

/**
 * @file
 * The module file for UNL System.
 */

use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use DrupalFinder\DrupalFinder;

/**
 * Implements hook_form_alter().
 */
function unl_system_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'system_site_information_settings') {
    /** @var \Drupal\Core\Config\ConfigFactoryInterface */
    $config_factory = \Drupal::service('config.factory');
    $config = $config_factory->get('unl_system.settings');

    $form['site_information']['#weight'] = -10;

    if (\Drupal::getContainer()->getParameter('site.path') != 'sites/default') {
      // Set up a connection to the default site's database to query the
      // unl_multisite unl_sites and unl_sites_aliases tables.
      $drupalFinder = new DrupalFinder();
      $drupalFinder->locateRoot(getcwd());
      $drupalRoot = $drupalFinder->getDrupalRoot();
      @require($drupalRoot . '/sites/default/settings.php');
      $default_database_name = $databases['default']['default']['database'];

      $connection = Database::getConnection('default');
      $connection_options = $connection->getConnectionOptions();
      $site_id = str_replace('project-herbie-', '', $connection_options['database']);

      $default_database = [
        'database' => $default_database_name,
        'username' => $connection_options['username'],
        'password' => $connection_options['password'],
        'driver' => $connection_options['driver'],
        'host' => $connection_options['host'],
      ];
      Database::addConnectionInfo($default_database_name, 'default', $default_database);
      $default_connection = Database::getConnection('default', $default_database_name);
      $rows = $default_connection->query(
        "SELECT s.uri, a.base_uri, a.path "
        . "FROM unl_sites AS s "
        . "LEFT JOIN unl_sites_aliases AS a "
        . "ON s.site_id = a.site_id "
        . "WHERE s.site_id = :site_id",
        array(':site_id' => $site_id)
      )->fetchAll();
      Database::setActiveConnection('default');

      $alternate_uris = [];
      foreach ($rows as $row) {
        if ($row->base_uri . $row->path) {
          $alternate_uris[] = $row->base_uri . $row->path;
        }
      }

      $base_urls = ['_null' => '--Select One--'];
      foreach ($alternate_uris as $alternate_uri) {
        $base_urls[$alternate_uri] = $alternate_uri;
      }
      $form['site_information']['primary_base_url'] = [
        '#title' => 'Primary Base URL',
        '#type' => 'select',
        '#options' => $base_urls,
        '#default_value' => $config->get('primary_base_url'),
        '#disabled' => !\Drupal\user\Entity\User::load(\Drupal::currentUser()
          ->id())->hasRole('administrator'),
      ];
    }

    $form['unl_affiliation'] = [
      '#type' => 'details',
      '#title' => 'UNL Affiliation',
      '#open' => TRUE,
      '#weight' => -9,
    ];
    $form['unl_affiliation']['affiliation_name'] = [
      '#type' => 'textfield',
      '#title' => t('Affiliation Name'),
      '#default_value' => $config->get('affiliation_name'),
    ];
    $form['unl_affiliation']['affiliation_url'] = [
      '#type' => 'url',
      '#title' => t('Affiliation URL'),
      '#default_value' => $config->get('affiliation_url'),
    ];

    $form['unl_visit_apply_give_nav'] = [
      '#type' => 'details',
      '#title' => 'UNL Visit, Apply, and Give Navigation Links',
      '#open' => TRUE,
      '#weight' => 1,
    ];

    // Visit Navigation Link Field
    $form['unl_visit_apply_give_nav']['visit_nav'] = [
      '#type' => 'details',
      '#title' => 'Visit Link',
      '#open' => false,
      '#weight' => -9,
    ];
    $form['unl_visit_apply_give_nav']['visit_nav']['visit_nav_link_text'] = [
      '#type' => 'textfield',
      '#title' => 'Link text',
      '#default_value' => $config->get('unl_visit_apply_give_nav.visit_nav.visit_nav_link_text'),
      '#parents' => ['unl_visit_apply_give_nav', 'visit_nav', 'visit_nav_link_text'],
    ];
    $form['unl_visit_apply_give_nav']['visit_nav']['visit_nav_url'] = [
      '#type' => 'linkit',
      '#description' => 'You can search for and select internal content, or enter an external URL, such as http://example.com.',
      '#title' => 'Visit URL',
      '#default_value' => $config->get('unl_visit_apply_give_nav.visit_nav.visit_nav_url'),
      '#autocomplete_route_name' => 'linkit.autocomplete',
      '#autocomplete_route_parameters' => [
        'linkit_profile_id' => 'content_linkit_profile',
      ],
      '#parents' => ['unl_visit_apply_give_nav', 'visit_nav', 'visit_nav_url'],
    ];
    // Apply Navigation Link Field
    $form['unl_visit_apply_give_nav']['apply_nav'] = [
      '#type' => 'details',
      '#title' => 'Apply Link',
      '#open' => false,
      '#weight' => -8,
    ];
    $form['unl_visit_apply_give_nav']['apply_nav']['apply_nav_link_text'] = [
      '#type' => 'textfield',
      '#title' => t('Link text'),
      '#default_value' => $config->get('unl_visit_apply_give_nav.apply_nav.apply_nav_link_text'),
      '#parents' => ['unl_visit_apply_give_nav', 'apply_nav', 'apply_nav_link_text'],
    ];
    $form['unl_visit_apply_give_nav']['apply_nav']['apply_nav_url'] = [
      '#type' => 'linkit',
      '#description' => 'You can search for and select internal content, or enter an external URL, such as http://example.com.',
      '#title' => 'Visit URL',
      '#default_value' => $config->get('unl_visit_apply_give_nav.apply_nav.apply_nav_url'),
      '#autocomplete_route_name' => 'linkit.autocomplete',
      '#autocomplete_route_parameters' => [
        'linkit_profile_id' => 'content_linkit_profile',
      ],
      '#parents' => ['unl_visit_apply_give_nav', 'apply_nav', 'apply_nav_url'],
    ];
    // Give Navigation Link Field
    $form['unl_visit_apply_give_nav']['give_nav'] = [
      '#type' => 'details',
      '#title' => 'Give Link',
      '#open' => false,
      '#weight' => -7,
    ];

    $form['unl_visit_apply_give_nav']['give_nav']['give_nav_link_text'] = [
      '#type' => 'textfield',
      '#title' => 'Link text',
      '#default_value' => $config->get('unl_visit_apply_give_nav.give_nav.give_nav_link_text'),
      '#parents' => ['unl_visit_apply_give_nav', 'give_nav', 'give_nav_link_text'],
    ];
    $form['unl_visit_apply_give_nav']['give_nav']['give_nav_url'] = [
      '#type' => 'linkit',
      '#description' => 'You can search for and select internal content, or enter an external URL, such as http://example.com.',
           '#title' => 'Visit URL',
            '#default_value' => $config->get('unl_visit_apply_give_nav.give_nav.give_nav_url'),
            '#autocomplete_route_name' => 'linkit.autocomplete',
            '#autocomplete_route_parameters' => [
              'linkit_profile_id' => 'content_linkit_profile',
            ],
            '#parents' => ['unl_visit_apply_give_nav', 'give_nav', 'give_nav_url'],
    ];
    $form['#validate'][] = '_unl_system_system_site_information_settings_validate';
    $form['#submit'][] = '_unl_system_system_site_information_settings_submit';
  }

  // If Content Moderation is enabled, add every new content type to the
  // editorial workflow. (The content_moderation modules takes care of
  // removal upon deletion.)
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('content_moderation')) {
    if ($form_id == 'node_type_add_form') {
      $form['actions']['save_continue']['#submit'][] = '_unl_system_node_type_add_form_submit';
    }
  }
}

/**
 * Validates system_site_information_settings form.
 *
 * @param array $form
 *   A array describing the form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _unl_system_system_site_information_settings_validate(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $unl_visit_apply_give_nav = $values['unl_visit_apply_give_nav'];
    // Loop through each link and validate.
    foreach ($unl_visit_apply_give_nav as $key => $value) {
      $title = $value["{$key}_link_text"];
      $url = $value["{$key}_url"];
      // Ensure either both link text and link url are empty or both are filled.
      if (empty($title) xor empty($url)) {
        if (empty($title)) {
          $form_state->setErrorByName("{$key}_link_text", t('A link text is required if you enter a URL for @link.', ['@link' => $key]));
        }
        if (empty($url)) {
          $form_state->setErrorByName("{$key}_url", t('A URL is required if you enter a link text for @link.', ['@link' => $key]));
        }
      }
    }

  if ($values['affiliation_name'] && empty($values['affiliation_url'])) {
    $form_state->setErrorByName('affiliation_url', 'Affiliation URL is required if Affiliation Name is defined.');
  }
  if (empty($values['affiliation_name']) && $values['affiliation_url']) {
    $form_state->setErrorByName('affiliation_name', 'Affiliation Name is required if Affiliation URL is defined.');
  }
}

/**
 * Submits system_site_information_settings form.
 *
 * @param array $form
 *   A array describing the form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _unl_system_system_site_information_settings_submit(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  /** @var \Drupal\Core\Config\ConfigFactoryInterface */
  $config_factory = \Drupal::service('config.factory');

  /** @var \Drupal\Core\Config\Config */
  $config = $config_factory->getEditable('unl_system.settings');

  if (array_key_exists('primary_base_url', $values) && $values['primary_base_url'] != '_null') {
    $config->set('primary_base_url', $values['primary_base_url']);
  }
  else {
    $config->delete('primary_base_url');
  }

  $config->set('affiliation_name', $values['affiliation_name']);
  $config->set('affiliation_url', $values['affiliation_url']);

  $config->set('unl_visit_apply_give_nav.visit_nav.visit_nav_link_text', $values['unl_visit_apply_give_nav']['visit_nav']['visit_nav_link_text']);
  $config->set('unl_visit_apply_give_nav.visit_nav.visit_nav_url', $values['unl_visit_apply_give_nav']['visit_nav']['visit_nav_url']);

  $config->set('unl_visit_apply_give_nav.apply_nav.apply_nav_link_text', $values['unl_visit_apply_give_nav']['apply_nav']['apply_nav_link_text']);
  $config->set('unl_visit_apply_give_nav.apply_nav.apply_nav_url', $values['unl_visit_apply_give_nav']['apply_nav']['apply_nav_url']);

  $config->set('unl_visit_apply_give_nav.give_nav.give_nav_link_text', $values['unl_visit_apply_give_nav']['give_nav']['give_nav_link_text']);
  $config->set('unl_visit_apply_give_nav.give_nav.give_nav_url', $values['unl_visit_apply_give_nav']['give_nav']['give_nav_url']);

  $config->save();
}

/**
 * Submits node_type_add_form form.
 *
 * @param array $form
 *   A array describing the form.
 * @param Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 */
function _unl_system_node_type_add_form_submit(array $form, FormStateInterface $form_state) {
  $values = $form_state->getValues();
  $workflow = \Drupal::entityTypeManager()->getStorage('workflow')->loadByProperties(['id' => 'editorial'])['editorial'];
  $config = $workflow->getTypePlugin()->getConfiguration();
  $config['entity_types']['node'][] = $values['type'];
  $workflow->getTypePlugin()->setConfiguration($config);
  $workflow->save();
}

/**
 * Implements hook_preprocess_block().
 */
function unl_system_preprocess_block(&$vars) {
  if ($vars['plugin_id'] == 'system_branding_block') {
    $config_factory = \Drupal::service('config.factory');
    $config = $config_factory->get('unl_system.settings');

    $vars['affiliation_name'] = $config->get('affiliation_name');
    $vars['affiliation_url'] = $config->get('affiliation_url');
  }
}

function unl_system_preprocess_region(&$variables) {
  $config_factory = \Drupal::service('config.factory');
  $config = $config_factory->get('unl_system.settings');

  // Pass visit_apply_give_nav_data to region--header.html.twig
  $variables['visit_apply_give_nav_data'] = $config->get('unl_visit_apply_give_nav');
}

/**
 * Implements hook_local_tasks_alter().
 */
function unl_system_menu_local_tasks_alter(&$data, $route_name) {

  $logged_in = \Drupal::currentUser()->isAuthenticated();
  if ($logged_in) {
    //Remove Delete menu item from the menu local task
    unset($data['tabs'][0]['entity.node.delete_form']);
    // Rearrange the local tasks tabs so that Delete is at the end.
    $data['tabs'][0]['entity.node.book_outline_form']['#weight'] = 100;
    // $data['tabs'][0]['entity.node.delete_form']['#weight'] = 110;
    $data['tabs'][0]['entity.taxonomy_term.delete_form']['#weight'] = 110;
    // Change the "Latest version" tab title provided by Content Moderation.
    $data['tabs'][0]['content_moderation.workflows:node.latest_version_tab']['#link']['title'] = 'Latest draft';
  }
}

