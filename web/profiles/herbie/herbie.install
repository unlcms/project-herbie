<?php

/**
 * Implements hook_install_tasks().
 *
 * hook_install() can't be used in a profile when installing from existing
 * config, so this technique is used.
 * https://www.drupal.org/project/drupal/issues/2982052#comment-13044759
 *
 * Here we set a flag to identify we are doing a site install so that
 * we can sidestep the RELEASE SAVEPOINT ProxySQL issue detailed here:
 * https://github.com/unlcms/project-herbie/issues/366
 */
function herbie_install_tasks(&$install_state) {
  // Referenced in patched version of core/modules/mysql/src/Driver/Database/mysql/Connection.php.
  \Drupal::state()->set('is_herbie_install', TRUE);
  return [];
}

/**
 * Uninstall Chosen module.
 */
function herbie_update_8101(&$sandbox) {
  drupal_flush_all_caches();
  $srvc = \Drupal::service('herbie.module_remove');
  $srvc->remove('chosen');
  $srvc->remove('chosen_field');
  $srvc->remove('chosen_lib');
}

/**
 * Delete n_major_areas_emphasis field.
 */
function herbie_update_8102(&$sandbox) {
  $field = \Drupal\field\Entity\FieldConfig::loadByName('node', 'major', 'n_major_areas_emphasis');
  if (!empty($field)) {
    $field->delete();
  }
  $field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'n_major_areas_emphasis');
  if (!empty($field_storage)) {
    $field_storage->delete();
  }
  $field = \Drupal\field\Entity\FieldConfig::loadByName('node', 'major', 'n_major_minors');
  if (!empty($field)) {
    $field->delete();
  }
  $field_storage = \Drupal\field\Entity\FieldStorageConfig::loadByName('node', 'n_major_minors');
  if (!empty($field_storage)) {
    $field_storage->delete();
  }
}

/**
 * Update wysiwyg format on p_b_accrd_item_body.
 */
function herbie_update_8103(&$sandbox) {
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties([
      'type' => 'accordion_item',
    ]);

  foreach ($paragraphs as $paragraph) {
    $paragraph->p_b_accrd_item_body->format = 'standard';
    $paragraph->save();
  }
}

/**
 * Update wysiwyg format on p_b_tab_item_body.
 */
function herbie_update_8104(&$sandbox) {
  $paragraphs = \Drupal::entityTypeManager()
    ->getStorage('paragraph')
    ->loadByProperties([
      'type' => 'tab_item',
    ]);

  foreach ($paragraphs as $paragraph) {
    $paragraph->p_b_tab_item_body->format = 'standard';
    $paragraph->save();
  }
}

/**
 * Update max_length of m_rv_html_representation field to 1000 characters.
 */
function herbie_update_8105(&$sandbox) {
  // Resize the Columns.
  $database = \Drupal::database();
  $database->query("ALTER TABLE media__m_rv_html_representation MODIFY m_rv_html_representation_value VARCHAR(1000)");
  $database->query("ALTER TABLE media_revision__m_rv_html_representation MODIFY m_rv_html_representation_value 	VARCHAR(1000)");

  // Update Storage Schema.
  $storage_key = 'media.field_schema_data.m_rv_html_representation';
  $storage_schema = \Drupal::keyValue('entity.storage_schema.sql');
  $field_schema = $storage_schema->get($storage_key);
  $field_schema['media__m_rv_html_representation']['fields']['m_rv_html_representation']['length'] = 1000;
  $field_schema['media_revision__m_rv_html_representation']['fields']['m_rv_html_representation']['length'] = 1000;
  $storage_schema->set($storage_key, $field_schema);

  // Update field configuration.
  $config = \Drupal::configFactory()
    ->getEditable('field.storage.media.m_rv_html_representation');
  $config->set('settings.max_length', 1000);
  $config->save(TRUE);
}
