<?php

/**
 * @file
 * Contains theme functions for unl_five_herbie.
 */

use Drupal\block\Entity\Block;
use Drupal\node\NodeInterface;
use Drupal\views\Views;
use Drupal\link\Plugin\Field\FieldType\LinkItem;

/**
 * Implements hook_preprocess_html().
 */
function unl_five_herbie_preprocess_html(&$variables) {
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteObject()->getOption('_layout_builder')) {
    // Add Layout Builder specific CSS settings.
    $variables['#attached']['library'][] = 'unl_five_herbie/layout-builder';
  }
}

/**
 * Implements template_preprocess_region().
 */
function unl_five_herbie_preprocess_region(&$variables) {
  // Hide the hero region page title on Person nodes.
  $current_route = \Drupal::routeMatch();
  $node = $current_route->getParameter('node');
  if ($node instanceof NodeInterface) {
    $bundle = $node->bundle();

    switch ($bundle) {
      case ('person'):
        $variables['unl_no_page_title'] = TRUE;
        break;
    }
  }

  if ($variables['region'] == 'hero') {
    $current_route = \Drupal::routeMatch();
    $node = $current_route->getParameter('node');
    if ($node instanceof NodeInterface) {
      // Create a Twig title_hidden variable to hide the page title
      // with .dcf-sr-only if user picks that option.
      if ($node->hasField('s_n_page_options') && !$node->get('s_n_page_options')->isEmpty()) {
        $publish_options = $node->get('s_n_page_options')->getValue();
        if (array_search('title_hidden', array_column($publish_options, 'value')) !== FALSE) {
          $variables['title_hidden'] = TRUE;
        }
      }

      // Add the Hero field (s_n_hero) to the hero region template, region--hero.html.twig.
      if ($node instanceof NodeInterface && $node->hasField('s_n_hero') && !$node->get('s_n_hero')->isEmpty()) {
        $variables['s_n_hero'] = $node->get('s_n_hero')->view(['label' => 'hidden', 'type' => 'entity_reference_entity_view'])[0];

        // Set a variable with the b_hero_size CSS class since rendering the field
        // directly into the template will include breaking HTML comments if twig debugging is enabled.
        $variables['hero_size_class'] = $variables['s_n_hero']['b_hero_size'][0]['#markup'];
      }
    }
    // Check if page is a group homepage
    $group_homepage = $current_route->getParameter('group');
    if ($group_homepage) {
        $variables['group_homepage'] = true;
    }
  }
}

/*
 * Implements template_preprocess_block().
 */
function unl_five_herbie_preprocess_block(&$variables) {
  // Get site name and make it available in block templates.
  $config = \Drupal::config('system.site');
  $variables['name_of_site'] = $config->get('name');

  // Set $bundle var for custom block entities.
  $bundle = NULL;
  if (isset($variables['content']['#block_content'])) {
    $bundle = $variables['content']['#block_content']->bundle();
  }

  if($variables['plugin_id'] == 'menu_block:main') {
    // Generate a unique ID for the block.
    $unique_id = uniqid('menu-block-main-', FALSE);
    $variables['attributes']['id'] = $unique_id;
  }

  if (isset($variables['content']['#block_content'])) {
    $section_layout_builder_styles = $variables['content']['#block_content']->__get('#section_lbs');
    $variables['data']['section_lbs'] = $section_layout_builder_styles;
  }
  elseif (isset($variables['content']['#view'])) {
    $section_layout_builder_styles = $variables['content']['#view']->storage->get('#section_lbs');
  }
  elseif (isset($variables['content']['#object'])) {
    $section_layout_builder_styles = $variables['content']['#object']->__get('#section_lbs');
  }

  // Set unl-cream on the main heading label in the block template.
  // Note that in many cases the label isn't being used in lieu of a "headline" field.
  if (isset($section_layout_builder_styles) && in_array('section_background_style_brand', $section_layout_builder_styles)) {
    $variables['title_attributes']['class'][] = 'unl-cream';
  }

  // Make host available to contact_info custom block.
  if ($bundle == 'contact_info') {
    $variables['data']['host'] = \Drupal::request()->getHost();
    $group = _unl_five_get_current_group();

   if ($group) {
     if($variables['elements']['#id'] == 'unl_five_herbie_contactinfo') {
      $variables['hide_block'] = TRUE;
     }
   }
  }
  // If it's a group page, hide main site's Related Links block.
  if($variables['elements']['#id'] == "unl_five_herbie_relatedlinks") {
   $group = _unl_five_get_current_group();
    if ($group) {
     $variables['hide_related_links_block'] = TRUE;
    }
   }
  // Make section Layout Builder Block Styles array available to each block in the layout.
  // Values can be accessed in a Twig template with data.block_lbs, see unl_five_herbie_preprocess_block().
  if (isset($variables['elements']['#layout_builder_style']) && !empty($variables['elements']['#layout_builder_style'])) {
    $layout_builder_styles = $variables['elements']['#layout_builder_style'];
    // Replace numeric keys with the value.
    foreach($layout_builder_styles as $value) {
      $block_layout_builder_styles[$value] = $value;
    }
  }
  if (isset($block_layout_builder_styles) && !empty($block_layout_builder_styles)) {
    $variables['content']['#block_content']->__set('#block_lbs', $block_layout_builder_styles);
  }
}


/**
 * Implements template_preprocess_node__TYPE().
 */
function unl_five_herbie_preprocess_node__news(&$variables) {
  // Determine URL, depending on whether local content or remote
  // (Nebraska Today) content.
  if ($canonical_url = $variables['node']->get('n_news_canonical_url')->getString()) {
    $variables['link'] = $canonical_url;
    $variables['source'] = 'remote';
  }
  else {
    $variables['link'] = $variables['url'];
    $variables['source'] = 'local';
  }
}


/**
 * Implements template_preprocess_node__TYPE() for the Person content type
 */
function unl_five_herbie_preprocess_node__person(&$variables) {
  $node = $variables["node"];

  //Adds alt text for uploaded images
  if (!$node->get('n_person_photo')->isEmpty() ) {
    $node->n_person_photo->alt = "Avatar for " . $node->getTitle();
  }
}

/**
 * Implements template_preprocess_field().
 */
function unl_five_herbie_preprocess_field(&$variables) {

  $field_name = $variables['field_name'];

  /*
   * Photo Hero Block Fields
   */
  $photoHeroFields = array('b_photohero_links');

  if (in_array($field_name, $photoHeroFields)) {

    switch ($field_name) {

      case 'b_photohero_links':
        // Add needed classes to the <a> tag inside a Hero block.
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-btn dcf-btn-primary';
        }
        break;
    }
  }

  /*
   * Person Node Fields
   */
  // $person_node_fields = array('n_person_photo');

  // if (in_array($field_name, $person_node_fields)) {


  //   $person_element_object = $variables['element']['#object'];
  //   $person_name = $person_element_object->label();

  //   switch ($field_name) {

  //     case 'n_person_photo':
  //         foreach ($variables['items'] as $key => $item) {
  //           $variables['items'][$key]['content']['#item']['attributes']['class'][] = 'test';
  //         }
  //         break;

  //   }
  // }

  /*
   * Call to action Block Fields
   */
  $ctaFields = array('b_cta_link', 'b_cta_summary', 'b_cta_title');

  if (in_array($field_name, $ctaFields)) {
    $block_background = $variables['element']['#object']->__get('#block_lbs');
    $block_background = $variables['element']['#object']->__get('#block_lbs');
    switch ($field_name) {
      case 'b_cta_link':
        foreach ($variables['items'] as $key => $item) {
          if(in_array("block_background_style_brand", $block_background) ||in_array("block_background_style_dark", $block_background) ) {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-btn dcf-btn-inverse-primary dcf-uppercase dcf-d-block unlcms-cta-link-width';
          } else {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-btn dcf-btn-primary dcf-uppercase dcf-d-block unlcms-cta-link-width';
          }
        }
        break;
    }
  }

  /*
   * Card Block Fields
   */
  $cardFields = array('b_card_image', 'b_card_cta', 'b_card_overline', 'b_card_subhead', 'b_card_headline');

  if (in_array($field_name, $cardFields)) {
    switch ($field_name) {
      case 'b_card_cta':
        $block_background = $variables['element']['#object']->__get('#block_lbs');

        foreach ($variables['items'] as $key => $item) {
          if(in_array("block_background_style_brand", $block_background) ||in_array("block_background_style_dark", $block_background) ) {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-btn dcf-btn-inverse-primary';
          }
          else {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-btn dcf-btn-primary';
          }
        }
        break;
      case 'b_card_headline':
        $card_headline_link_url = '';
        if ($variables['element']['#object']->get('b_card_headline_link')) {
          $card_headline_link = $variables['element']['#object']->get('b_card_headline_link');

          if ($card_headline_link->first()) {
            $card_headline_link_item = $card_headline_link->first();
            $card_headline_link_url = $card_headline_link_item->getUrl()->toString();
          }
        }
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['card_data']['card_headline_link'] = $card_headline_link_url;
        }
        break;
    }
  }

  /*
   * Timeline Block Fields
   */
  $timelineFields = array('b_timeline_style', 'b_timeline_item', );

  if (in_array($field_name, $timelineFields)) {

    $timelineStyle = $variables['element']['#object']->get('b_timeline_style')->getValue();

    switch ($field_name) {
      case 'b_timeline_item':
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['timelineData']['timelineStyle'] = isset($timelineStyle[0]['value']) ? strval($timelineStyle[0]['value']) : '';
        }
        break;
    }
  }

  /*
   * Social media links Block Fields
   */
  $fields = array('b_social_media_links_title');

  if (in_array($field_name, $fields)) {
    switch ($field_name) {
      case 'b_social_media_links_title':
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'dcf-txt-h5 dcf-txt-center unl-cream dcf-mb-0';
        }
        break;
    }
  }

  /*
   * Oembed Block Fields
   */
  $fields = array('field_media_oembed_video');

  if (in_array($field_name, $fields)) {
    switch ($field_name) {
      case 'field_media_oembed_video':
        foreach ($variables['items'] as $key => $item) {
          $variables['items'][$key]['content']['#attributes']['frameborder'] = null;
          $variables['items'][$key]['content']['#attributes']['allowtransparency'] = null;

        }
        break;
    }
  }

  /*
   * Majors Content Type Fields
   */
  $fields = array('n_major_hero_image');

  if (in_array($field_name, $fields)) {
    $majors_gero_image_position = $variables['element']['#object']->get('n_major_heroimage_v_position')->getValue()[0]['value'];

    switch ($field_name) {
      case 'n_major_hero_image':
        foreach ($variables['items'] as $key => $item) {
          switch ($majors_gero_image_position) {
            case 'zero_percent':
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-0-percent';
              break;
            case 'twenty_percent':
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-20-percent';
              break;
            case 'forty_percent':
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-40-percent';
              break;
            case 'fifty_percent':
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-50-percent';
              break;
            case 'sixty_percent':
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-60-percent';
              break;
            case 'eighty_percent':
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-80-percent';
              break;
            case 'hundred_percent':
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-100-percent';
              break;
            default:
              $variables['items'][$key]['content']['#item_attributes']['class'][] = 'hero-obj-position-50-percent';
              break;
          }
        }
    }
  }

  /*
   * Tandem links Block Fields
   */
  $fields = array('b_tandem_buttons','b_tandem_style','b_tandem_stack','b_tandem_overline','b_tandem_links','p_b_tandem_button_link');
  if (in_array($field_name, $fields)) {
    $primary_button = 'dcf-btn dcf-btn-primary';
    $secondary_button = 'dcf-btn dcf-btn-secondary';
    $tertiary_button = 'dcf-btn dcf-btn-tertiary';

    switch ($field_name) {
      case 'p_b_tandem_button_link':
        $primary_button = 'dcf-btn dcf-btn-primary';
        $secondary_button = 'dcf-btn dcf-btn-secondary';
        $tertiary_button = 'dcf-btn dcf-btn-tertiary';

        $tandem_block = $variables['element']['#object']->_referringItem->getEntity();
        $tandem_buttons = $tandem_block->toArray()['b_tandem_buttons'];

        if(count($tandem_buttons) == 1) {
          $primary_button = 'dcf-btn dcf-btn-primary dcf-mt-5';
          $secondary_button = 'dcf-btn dcf-btn-secondary dcf-mt-5';
          $tertiary_button = 'dcf-btn dcf-btn-tertiary dcf-mt-5';
        }
        foreach ($variables['items'] as $key => $item) {

          $button_style = $variables['element']['#object']->get('p_b_tandem_button_style')->getValue()[0]['value'];

          if ($button_style == 'dcf-btn-primary') {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = $primary_button;
          }
            else if ($button_style == 'dcf-btn-secondary') {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = $secondary_button;
          }
            else if ($button_style == 'dcf-btn-tertiary') {
            $variables['items'][$key]['content']['#options']['attributes']['class'][] = $tertiary_button;
          }
        }
        break;
    }
  }
}

/**
 * Implements template_preprocess_layout().
 */
function unl_five_herbie_preprocess_layout(&$variables) {
  // Hide the second sidebar and make the first full width if user selects "Hide sidebar(s)".
  $current_route = \Drupal::routeMatch();
  $node = $current_route->getParameter('node');
  if ($node instanceof NodeInterface) {
    if ($variables['settings']['label'] == 'Content' &&
      $node->hasField('s_n_page_options') &&
      !$node->get('s_n_page_options')->isEmpty())
    {
      $publish_options = $node->get('s_n_page_options')->getValue();
      if (array_search('no_sidebars', array_column($publish_options, 'value')) !== FALSE) {
        $variables['region_attributes']['first']->removeClass('dcf-col-25%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-33%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-50%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-67%-start@md');
        $variables['region_attributes']['first']->removeClass('dcf-col-75%-start@md');
        $variables['region_attributes']['second']->addClass('dcf-d-none');
      }
    }
  }

  // Make section Layout Builder Styles array available to each block in the layout.
  // Values can be accessed in a Twig template with data.section_lbs, see unl_five_herbie_preprocess_block().
  if (isset($variables['settings']['layout_builder_styles_style']) && !empty($variables['settings']['layout_builder_styles_style'])) {
    $layout_builder_styles = $variables['settings']['layout_builder_styles_style'];
    // Replace numeric keys with the value.
    foreach($layout_builder_styles as $value) {
      $section_layout_builder_styles[$value] = $value;
    }
  }
  if (isset($section_layout_builder_styles) && !empty($section_layout_builder_styles)) {
    // Loop through each region.
    foreach ($variables['content'] as $region_id => $region) {
      if (substr($region_id, 0, 1) !== '#') {
        // Loop through each block.
        foreach ($region as $block_id => $block) {
          if (substr($block_id, 0, 1) !== '#') {
            if (isset($variables['content'][$region_id][$block_id]['content']['#block_content'])) {
              $variables['content'][$region_id][$block_id]['content']['#block_content']->__set('#section_lbs', $section_layout_builder_styles);
            }
            elseif (isset($variables['content'][$region_id][$block_id]['content']['#view'])) {
              $variables['content'][$region_id][$block_id]['content']['#view']->storage->set('#section_lbs', $section_layout_builder_styles);
            }
            elseif (isset($variables['content'][$region_id][$block_id]['content']['#object'])) {
              $variables['content'][$region_id][$block_id]['content']['#object']->__set('#section_lbs', $section_layout_builder_styles);
            }
          }
        }
      }
    }
  }

  $background_patterns = array(
    "section_background_pattern_campus" => array(
      "unl-bg-scarlet" => "unlcms-bg-campus-scarlet",
      "unl-bg-dark-gray" => "unlcms-bg-campus-dark-gray",
      "unl-bg-darker-gray" => "unlcms-bg-campus-darker-gray",
      "unl-bg-darkest-gray" => "unlcms-bg-campus-darkest-gray",
      "unl-bg-light-gray" => "unlcms-bg-campus-light-gray",
      "unl-bg-lighter-gray" => "unlcms-bg-campus-lighter-gray",
      "unl-bg-lightest-gray" => "unlcms-bg-campus-lightest-gray"
    ),
    "section_background_pattern_landmarks" => array(
      "unl-bg-scarlet" => "unlcms-bg-landmarks-scarlet",
      "unl-bg-dark-gray" => "unlcms-bg-landmarks-dark-gray",
      "unl-bg-darker-gray" => "unlcms-bg-landmarks-darker-gray",
      "unl-bg-darkest-gray" => "unlcms-bg-landmarks-darkest-gray",
      "unl-bg-light-gray" => "unlcms-bg-landmarks-light-gray",
      "unl-bg-lighter-gray" => "unlcms-bg-landmarks-lighter-gray",
      "unl-bg-lightest-gray" => "unlcms-bg-landmarks-lightest-gray"
    ),
    "section_background_pattern_majors" => array(
      "unl-bg-scarlet" => "unlcms-bg-majors-scarlet",
      "unl-bg-dark-gray" => "unlcms-bg-majors-dark-gray",
      "unl-bg-darker-gray" => "unlcms-bg-majors-darker-gray",
      "unl-bg-darkest-gray" => "unlcms-bg-majors-darkest-gray",
      "unl-bg-light-gray" => "unlcms-bg-majors-light-gray",
      "unl-bg-lighter-gray" => "unlcms-bg-majors-lighter-gray",
      "unl-bg-lightest-gray" => "unlcms-bg-majors-lightest-gray"
    )
  );

  foreach ($variables["settings"]["layout_builder_styles_style"] as $layout_builder_styles_style_value) {
    foreach ($background_patterns as $background_patterns_label => $background_patterns_background_color) {
      //Check if the background pattern label is the same as the background pattern chosen by the user
      if ($background_patterns_label == $layout_builder_styles_style_value) {
        foreach ($background_patterns_background_color as $background_color_label => $background_color_css_value) {
          //Add the CSS value based on the section background color chosen
          if (in_array($background_color_label, $variables["attributes"]["class"])) {
            $variables["attributes"]["class"][] =  $background_color_css_value;
          }
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_views_view_fields().
 */
function unl_five_herbie_preprocess_views_view_fields(&$variables) {
  // Apply .unl-cream to View fields if view is being included in a dark
  // Layout Builder section.
  $section_layout_builder_styles = $variables['view']->storage->get('#section_lbs');
  if (is_array($section_layout_builder_styles) &&
    in_array('section_background_style_brand', $section_layout_builder_styles)) {
    foreach ($variables['fields'] as $field) {
      $field->element_attributes->addClass('class', 'unl-cream');
    }
  }
}

function unl_five_herbie_preprocess_media(&$variables) {

  $media = $variables['media'];
  $referring_item = $media->_referringItem;

  if ($referring_item) {
    $parent_block = $referring_item->getEntity();
    $bundle = $parent_block->bundle();

    if ($bundle == 'hero') {
      $referring_field = $referring_item->getParent();
      $field_name = $referring_field->getName();

      if ($field_name == "b_hero_image") {
        $variables['attributes']['class'][] = "dcf-ratio dcf-ratio-16x9";
      }
    }

    if ($bundle == 'photo_hero') {
      $referring_field = $referring_item->getParent();
      $field_name = $referring_field->getName();

      if ($field_name == "b_photohero_image") {
        $variables['attributes']['class'][] = "unlcms-display-banner-img dcf-ratio dcf-ratio-16x9 dcf-mb-0";
      }
    }

    if ($bundle == 'simple_media') {
      $referring_field = $referring_item->getParent();
      $field_name = $referring_field->getName();

      if ($field_name == "b_simple_media_media" && $variables['media']->hasField('field_media_image')) {
        $responsive_image_style = $parent_block->__get('b_simple_media_aspect_ratio')->getValue()[0]['value'];

        $variables['elements']['field_media_image']['#view_mode'] = $responsive_image_style;
        $variables['elements']['#view_mode'] = $responsive_image_style;
        $image_item = $variables['media']->get('field_media_image')->first();

        //Render image field using the responsive image style selected by user.
        $variables['content']['field_media_image'] = $image_item->view([
          'type' => 'responsive_image',
          'settings' => [
            'responsive_image_style' => $responsive_image_style,
          ]
        ]);

        $variables['attributes']['class'] = array_filter($variables['attributes']['class'], function ($class) {
          return strpos($class, 'view-mode') !== 0;
        });

        $variables['attributes']['class'][] = "view-mode--" . $responsive_image_style;
        $variables['attributes']['class'][] = "simple-media-media-entity";
      }
    }
  }
}

/**
 * Implements template_preprocess_responsive_image_formatter().
 */
function unl_five_herbie_preprocess_responsive_image_formatter(array &$variables) {
  // Pass field name to Twig as data- attribute.
  $variables['responsive_image']['#attributes']['data-field-name'] = $variables['item']->getFieldDefinition()->get('field_name');

  $parent_entity = $variables['item']->getEntity();
  $referring_item = $parent_entity->_referringItem;

  if ($referring_item) {
    $parent_block = $referring_item->getEntity();
    $bundle = $parent_block->bundle();

    if ($bundle == 'hero' || $bundle == 'photo_hero') {
      $referring_field = $referring_item->getParent();
      $field_name = $referring_field->getName();

      if ($field_name == "b_hero_image" || $field_name == "b_photohero_image") {
        $hero_image_classes = ['dcf-ratio-child', 'dcf-obj-fit-cover'];

        if ($field_name == 'b_hero_image') {
          $object_position_field = $parent_block->__get('b_hero_img_obj_pos')->getValue();
        } else if ($field_name == 'b_photohero_image') {
          array_push($hero_image_classes, "unlcms-slow-zoom-in");
          $object_position_field = $parent_block->__get('b_photohero_img_obj_pos')->getValue();
        }

        if ($object_position_field) {
          if ($field_name == 'b_hero_image') {
            $object_position_field_value = $parent_block->__get('b_hero_img_obj_pos')->getValue()[0]['value'];
          } else if ($field_name == 'b_photohero_image') {
            $object_position_field_value = $parent_block->__get('b_photohero_img_obj_pos')->getValue()[0]['value'];
          }

          switch ($object_position_field_value) {
            case 'unlcms_hero_obj_pos_50_0':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-50-0");
              break;
            case 'unlcms_hero_obj_pos_50_20':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-50-20");
              break;
            case 'unlcms_hero_obj_pos_50_40':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-50-40");
              break;
            case 'unlcms_hero_obj_pos_50_60':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-50-60");
              break;
            case 'unlcms_hero_obj_pos_50_80':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-50-80");
              break;
            case 'unlcms_hero_obj_pos_50_100':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-50-100");
              break;
            case 'unlcms_hero_obj_pos_0_50':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-0-50");
              break;
            case 'unlcms_hero_obj_pos_20_50':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-20-50");
              break;
            case 'unlcms_hero_obj_pos_40_50':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-40-50");
              break;
            case 'unlcms_hero_obj_pos_60_50':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-60-50");
              break;
            case 'unlcms_hero_obj_pos_80_50':
              array_push($hero_image_classes, "unlcms-hero-obj-pos-80-50");
              break;
            case 'unlcms_hero_obj_pos_100_50':
              array_push($hero_image_classes, "unlcms_hero_obj_pos_100_50");
              break;
          }
        }

        foreach ($hero_image_classes as $class) {
          $variables['responsive_image']['#attributes']['class'][] = $class;
        }
      }
    }

    if ($bundle == 'simple_media') {
      $classes = array(
        "animations" => array(
          "unl-scroll-fx-fade-in" => "unl-scroll-fx-fade-in",
          "unl-scroll-fx-move-left" => "unl-scroll-fx-move-left",
          "unl-scroll-fx-move-right" => "unl-scroll-fx-move-right",
          "unl-scroll-fx-move-up" => "unl-scroll-fx-move-up",
        )
      );

      $image_animation = $parent_block->__get('b_simple_media_animation')->getValue();
      $border_or_shadow = $parent_block->__get('b_simple_media_frame_or_shadow')->getValue()[0]['value'];

      if ($border_or_shadow == 'frame') {
        $variables['responsive_image']['#attributes']['class'][] = 'unl-frame-quad';
      }

      foreach ($image_animation as $array_index => $list_style_key) {
        foreach ($classes['animations'] as $style_name => $class_values) {
          if ($style_name == $list_style_key['value']) {
            $variables['responsive_image']['#attributes']['class'][] = $class_values;
          }
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_image().
 */
function unl_five_herbie_preprocess_image(&$variables) {
  // On Major nodes, output images with absolute file paths so that
  // they load cross-domain on pages included in Drupal 7 with ?format=partial.
  $node = \Drupal::request()->attributes->get('node');
  if (isset($node)) {
    $bundle = $node->bundle();
  }
  if (isset($bundle) && $bundle == 'major' && isset($variables['uri'])) {
    /** @var \Drupal\Core\File\FileUrlGenerator $file_url_generator */
    $file_url_generator = \Drupal::service('file_url_generator');
    $variables['attributes']['src'] = $file_url_generator->generateAbsoluteString($variables['uri']);
  }
}
